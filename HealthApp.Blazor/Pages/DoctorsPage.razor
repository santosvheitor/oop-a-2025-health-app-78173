@page "/doctors"
@using System.Net.Http.Json
@using HealthApp.Blazor.Auth
@using HealthApp.Blazor.Models
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager NavManager
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider

<h3 class="text-2xl font-semibold mb-4">Doctors</h3>

@if (isLoading)
{
    <p>Loading doctors...</p>
}
else if (isAdmin)
{
    <AdminDoctorsView Doctors="Doctors" OnAdd="AddDoctor" OnDelete="DeleteDoctor" OnEdit="EditDoctor" />
}
else if (isDoctor)
{
    <DoctorsProfileView Doctor="CurrentDoctor" />
}
else if (isPatient)
{
    <PatientDoctorsSearchView Doctors="Doctors" SearchTerm="searchTerm" OnSearch="SearchDoctors" OnBook="BookAppointment" />
}

@code {
    private bool isLoading = true;
    private bool isAdmin;
    private bool isDoctor;
    private bool isPatient;

    private List<DoctorModel> Doctors = new();
    private DoctorModel CurrentDoctor = new();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isDoctor = user.IsInRole("Doctor");
        isPatient = user.IsInRole("Patient");

        try
        {
            if (isAdmin || isPatient)
            {
                // Search all doctors for Admin and Patient
                Doctors = await Http.GetFromJsonAsync<List<DoctorModel>>("api/doctors") ?? new();
            }

            if (isDoctor)
            {
                //Search the Doctor's own profile
                CurrentDoctor = await Http.GetFromJsonAsync<DoctorModel>("api/doctors/me") ?? new();
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error to load data from the doctors: {ex.Message}");
        }

        isLoading = false;
    }

    private void AddDoctor() => NavManager.NavigateTo("/doctors/add");
    private void EditDoctor(int id) => NavManager.NavigateTo($"/doctors/edit/{id}");

    private async Task DeleteDoctor(int id)
    {
        var response = await Http.DeleteAsync($"api/doctors/{id}");
        if (response.IsSuccessStatusCode)
        {
            Doctors = await Http.GetFromJsonAsync<List<DoctorModel>>("api/doctors") ?? new();
        }
        else
        {
            Console.WriteLine("Error to delete doctor.");
        }
    }

    private void BookAppointment(int doctorId) => NavManager.NavigateTo($"/appointments/book/{doctorId}");

    private async Task SearchDoctors()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Doctors = await Http.GetFromJsonAsync<List<DoctorModel>>("api/doctors") ?? new();
        }
        else
        {
            Doctors = await Http.GetFromJsonAsync<List<DoctorModel>>($"api/doctors/search?query={searchTerm}") ?? new();
        }
    }
}